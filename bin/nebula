#!/usr/bin/env python

# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import os
import sys
import time
import argparse
import logging
import socket
import logging

from nebula.service import ServiceConfig
from nebula.tasks import TaskGroup

def action_manage(args):

    if args.builddir is None:
        bfile = os.path.abspath("Nebulafile")
        if not os.path.exists(file):
            bfile = os.path.abspath("NebulaFile")
        args.buildfile = bfile
    else:
        bfile = os.path.join(os.path.abspath(args.builddir), "Nebulafile")
        if not os.path.exists(bfile):
            bfile = os.path.join(os.path.abspath(args.builddir), "NebulaFile")
        args.buildfile = bfile
    args.workdir = os.path.abspath(args.workdir)

    if args.server is None:
        args.server = socket.gethostname()

    config = Config(mesos=args.mesos,
        port=args.port,
        host=args.server,
        workdir=args.workdir,
        docker=args.docker,
        docker_clean = args.docker_clean,
        object_store = init_objectstore_url(args.object_store),
        doc_store = init_docstore_url(args.doc_store),
        max_servers=args.max_servers
    )
    build = NebulaCompile()
    if build.compile(args.buildfile):
        sys.stderr.write("Compile Failure")
        sys.exit(1)
    build.build_images(config)
    sched = Scheduler(build.to_dags(), config)
    web = WebSite(sched, config)

    if config.mesos is not None:
        import nebula.mesos_drms
        drms = nebula.mesos_drms.MesosDRMS(sched, config)

    try:
        web.start()
        drms.start()
        while True:
            time.sleep(5)
    except KeyboardInterrupt:
        pass
    finally:
        web.stop()
        drms.stop()

def action_tree(args):
    config = Config(
        mesos=args.mesos,
        port=args.port,
        host=args.server,
        docker_clean = args.docker_clean,
        basedir=os.path.dirname(args.buildfile)
    )
    if not args.resume:
        build = NebulaCompile()
        if build.compile(args.buildfile):
            sys.stderr.write("Compile Failure")
            sys.exit(1)
        dagset = build.to_dags()
        dagset.save(config.get_schema_dir())
    else:
        dagset = DagSet.load(config.get_schema_dir())

    for a in dagset.dags.values():
        print "DAG:", a

def action_run(args):

    config = ServiceConfig()
    with open(args.service_file) as handle:
        config.load(handle)

    taskgroup = TaskGroup()
    with open(args.task_file) as handle:
        taskgroup.load(handle)

    service = config.create()
    error = 0
    try:
        logging.info("Starting Service")
        service.start()
        logging.info("Starting Tasks")
        jobs = []
        for new_task in taskgroup:
            job = service.submit(new_task)
            jobs.append(job)

        service.wait(jobs)

        for jobs in jobs:
            if job.get_status() not in ['ok']:
                sys.stderr.write("---ERROR---\n")
                sys.stderr.write(job.error_msg + "\n")
                sys.stderr.write("---ERROR---\n")
                error = 1
    finally:
        logging.info("Done")
        if not args.hold and (not args.hold_error or not error):
            service.stop()    
    return error

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title="subcommand")

    parser_run = subparsers.add_parser('run')
    parser_run.add_argument("-v", action="store_true", default=False)
    parser_run.add_argument("--hold", action="store_true", default=False)
    parser_run.add_argument("--hold-error", action="store_true", default=False)
    parser_run.add_argument("service_file")
    parser_run.add_argument("task_file")
    parser_run.set_defaults(func=action_run)

    parser_tree = subparsers.add_parser('tree')
    parser_tree.set_defaults(func=action_tree)

    parser_manage = subparsers.add_parser('manage')
    parser_manage.set_defaults(func=action_manage)
    parser_manage.add_argument("--mesos", default="127.0.0.1:5050")
    parser_manage.add_argument("--port", type=int, default=9999)
    parser_manage.add_argument("-v", action="store_true", default=False)
    #parser_manage.add_argument("-r", "--resume", action="store_true", default=False)
    parser_manage.add_argument("--docker-clean", action="store_true", default=False)

    parser_manage.add_argument("--object-store", default="/tmp/nebula-storage")
    parser_manage.add_argument("--doc-store", default="/tmp/nebula-docs")
    parser_manage.add_argument("-s", "--server", default=None)
    #parser_manage.add_argument("--sf", "--shared", dest="shared", action="append", default=[])
    parser_manage.add_argument("-m", "--max-servers", type=int, default=0)
    parser_manage.add_argument("-w", "--workdir", default="/tmp")
    parser_manage.add_argument("--docker", default=None)

    parser_manage.add_argument("builddir", nargs="?", default=None)
    args = parser.parse_args()


    if args.v:
        logging.basicConfig(level=logging.DEBUG)
        logging.info("Verbose logging")
    else:
        logging.basicConfig(level=logging.INFO)

    func = args.func

    #try:
    e = func(args)
    sys.exit(e)
    #except Exception, e:
    #    sys.stderr.write("%s\n" % (e.message))
    #    sys.exit(1)
